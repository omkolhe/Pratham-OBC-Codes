
Downlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  008000ee  008000ee  000006ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f5  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  00001f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b49  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000611  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e67  00000000  00000000  00003bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	20 c2       	rjmp	.+1088   	; 0x458 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ea       	ldi	r30, 0xA8	; 168
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 3e       	cpi	r26, 0xEE	; 238
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	ae ee       	ldi	r26, 0xEE	; 238
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 36       	cpi	r26, 0x67	; 103
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3c d2       	rcall	.+1144   	; 0x4d2 <main>
  5a:	a4 c2       	rjmp	.+1352   	; 0x5a4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <crc16>:

unsigned short crc16(unsigned char* data_p, unsigned char length){
	unsigned char x;
	unsigned short crc = 0xFFFF;

	while (length--){
  5e:	7f ef       	ldi	r23, 0xFF	; 255
  60:	76 0f       	add	r23, r22
  62:	66 23       	and	r22, r22
  64:	29 f1       	breq	.+74     	; 0xb0 <crc16+0x52>
  66:	e8 2f       	mov	r30, r24
  68:	f9 2f       	mov	r31, r25
  6a:	4f ef       	ldi	r20, 0xFF	; 255
  6c:	5f ef       	ldi	r21, 0xFF	; 255
		x = crc >> 8 ^ *data_p++;
  6e:	21 91       	ld	r18, Z+
  70:	25 27       	eor	r18, r21
		x ^= x>>4;
  72:	32 2f       	mov	r19, r18
  74:	32 95       	swap	r19
  76:	3f 70       	andi	r19, 0x0F	; 15
  78:	92 2f       	mov	r25, r18
  7a:	93 27       	eor	r25, r19
		crc = (crc << 8) ^ ((unsigned short)(x << 12)) ^ ((unsigned short)(x <<5)) ^ ((unsigned short)x);
  7c:	29 2f       	mov	r18, r25
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	54 2f       	mov	r21, r20
  82:	44 27       	eor	r20, r20
  84:	42 27       	eor	r20, r18
  86:	53 27       	eor	r21, r19
  88:	c9 01       	movw	r24, r18
  8a:	98 2f       	mov	r25, r24
  8c:	88 27       	eor	r24, r24
  8e:	92 95       	swap	r25
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	48 27       	eor	r20, r24
  94:	59 27       	eor	r21, r25
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	22 95       	swap	r18
  9c:	32 95       	swap	r19
  9e:	30 7f       	andi	r19, 0xF0	; 240
  a0:	32 27       	eor	r19, r18
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	32 27       	eor	r19, r18
  a6:	42 27       	eor	r20, r18
  a8:	53 27       	eor	r21, r19

unsigned short crc16(unsigned char* data_p, unsigned char length){
	unsigned char x;
	unsigned short crc = 0xFFFF;

	while (length--){
  aa:	71 50       	subi	r23, 0x01	; 1
  ac:	00 f7       	brcc	.-64     	; 0x6e <crc16+0x10>
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <crc16+0x56>

}

unsigned short crc16(unsigned char* data_p, unsigned char length){
	unsigned char x;
	unsigned short crc = 0xFFFF;
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	5f ef       	ldi	r21, 0xFF	; 255
		x = crc >> 8 ^ *data_p++;
		x ^= x>>4;
		crc = (crc << 8) ^ ((unsigned short)(x << 12)) ^ ((unsigned short)(x <<5)) ^ ((unsigned short)x);
	}
	return crc;
}
  b4:	ca 01       	movw	r24, r20
  b6:	08 95       	ret

000000b8 <make_ax25_frame_from_data>:
#include "util/crc16.h"

unsigned short crc16(unsigned char* data_p, unsigned char length);
int Data_Length = 34;
void make_ax25_frame_from_data(uint8_t *frame, uint8_t *data)
{
  b8:	cf 92       	push	r12
  ba:	df 92       	push	r13
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	c0 55       	subi	r28, 0x50	; 80
  ce:	d1 09       	sbc	r29, r1
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	6c 01       	movw	r12, r24
	uint8_t i, buf[80], size = 0;
	uint16_t crc;
	//char tp[9] = "PRATHA";
	frame[size++] = AX_FLAG;
  dc:	8e e7       	ldi	r24, 0x7E	; 126
  de:	d6 01       	movw	r26, r12
  e0:	8d 93       	st	X+, r24
  e2:	7d 01       	movw	r14, r26

	memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	e5 eb       	ldi	r30, 0xB5	; 181
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <make_ax25_frame_from_data+0x36>
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	d7 01       	movw	r26, r14
  fc:	9e 01       	movw	r18, r28
  fe:	29 5f       	subi	r18, 0xF9	; 249
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	fc 01       	movw	r30, r24
	for(i = 0; i < AX_ADDR_SIZE; i++)
	frame[i + size] = buf[i] ;
 104:	41 91       	ld	r20, Z+
 106:	4d 93       	st	X+, r20
	uint16_t crc;
	//char tp[9] = "PRATHA";
	frame[size++] = AX_FLAG;

	memcpy(buf, "CQ    ", AX_ADDR_SIZE);
	for(i = 0; i < AX_ADDR_SIZE; i++)
 108:	e2 17       	cp	r30, r18
 10a:	f3 07       	cpc	r31, r19
 10c:	d9 f7       	brne	.-10     	; 0x104 <make_ax25_frame_from_data+0x4c>
	frame[i + size] = buf[i] ;
	size += AX_ADDR_SIZE;
	frame[size++] = 0b01100000;
 10e:	40 e6       	ldi	r20, 0x60	; 96
 110:	f6 01       	movw	r30, r12
 112:	47 83       	std	Z+7, r20	; 0x07

	memcpy(buf, "VU2BUG", AX_ADDR_SIZE);
 114:	46 e0       	ldi	r20, 0x06	; 6
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	de 01       	movw	r26, r28
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	01 90       	ld	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	4a 95       	dec	r20
 124:	e1 f7       	brne	.-8      	; 0x11e <make_ax25_frame_from_data+0x66>
 126:	d6 01       	movw	r26, r12
 128:	18 96       	adiw	r26, 0x08	; 8
 12a:	fc 01       	movw	r30, r24
	for(i = 0; i < AX_ADDR_SIZE; i++)
	frame[i + size] = buf[i] ;
 12c:	41 91       	ld	r20, Z+
 12e:	4d 93       	st	X+, r20
	frame[i + size] = buf[i] ;
	size += AX_ADDR_SIZE;
	frame[size++] = 0b01100000;

	memcpy(buf, "VU2BUG", AX_ADDR_SIZE);
	for(i = 0; i < AX_ADDR_SIZE; i++)
 130:	e2 17       	cp	r30, r18
 132:	f3 07       	cpc	r31, r19
 134:	d9 f7       	brne	.-10     	; 0x12c <make_ax25_frame_from_data+0x74>
	frame[i + size] = buf[i] ;
	size += AX_ADDR_SIZE;
	frame[size++] = 0b01101000;
 136:	48 e6       	ldi	r20, 0x68	; 104
 138:	d6 01       	movw	r26, r12
 13a:	1e 96       	adiw	r26, 0x0e	; 14
 13c:	4c 93       	st	X, r20

	memcpy(buf, "RELAY ", AX_ADDR_SIZE);
 13e:	46 e0       	ldi	r20, 0x06	; 6
 140:	e3 ec       	ldi	r30, 0xC3	; 195
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	4a 95       	dec	r20
 14e:	e1 f7       	brne	.-8      	; 0x148 <make_ax25_frame_from_data+0x90>
 150:	f6 01       	movw	r30, r12
 152:	3f 96       	adiw	r30, 0x0f	; 15
	for(i = 0; i < AX_ADDR_SIZE; i++)
	frame[i + size] = buf[i] ;
 154:	dc 01       	movw	r26, r24
 156:	4d 91       	ld	r20, X+
 158:	cd 01       	movw	r24, r26
 15a:	41 93       	st	Z+, r20
	frame[i + size] = buf[i] ;
	size += AX_ADDR_SIZE;
	frame[size++] = 0b01101000;

	memcpy(buf, "RELAY ", AX_ADDR_SIZE);
	for(i = 0; i < AX_ADDR_SIZE; i++)
 15c:	a2 17       	cp	r26, r18
 15e:	b3 07       	cpc	r27, r19
 160:	c9 f7       	brne	.-14     	; 0x154 <make_ax25_frame_from_data+0x9c>
	frame[i + size] = buf[i] ;
	size += AX_ADDR_SIZE;
	frame[size++] = 0b01100001;
 162:	81 e6       	ldi	r24, 0x61	; 97
 164:	f6 01       	movw	r30, r12
 166:	85 8b       	std	Z+21, r24	; 0x15

	frame[size++] = AX_CONTROL;
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	86 8b       	std	Z+22, r24	; 0x16
	frame[size++] = AX_PID;
 16c:	80 ef       	ldi	r24, 0xF0	; 240
 16e:	87 8b       	std	Z+23, r24	; 0x17

	memcpy(buf, data, Data_Length);
 170:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <Data_Length>
 174:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <Data_Length+0x1>
 178:	a8 01       	movw	r20, r16
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	09 d2       	rcall	.+1042   	; 0x592 <memcpy>
	for(i = 0; i < Data_Length; i++)
 180:	10 16       	cp	r1, r16
 182:	11 06       	cpc	r1, r17
 184:	c4 f4       	brge	.+48     	; 0x1b6 <make_ax25_frame_from_data+0xfe>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	20 e0       	ldi	r18, 0x00	; 0
	frame[i + size] = buf[i] ;
 18c:	f6 01       	movw	r30, r12
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	a1 e0       	ldi	r26, 0x01	; 1
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ac 0f       	add	r26, r28
 198:	bd 1f       	adc	r27, r29
 19a:	a8 0f       	add	r26, r24
 19c:	b9 1f       	adc	r27, r25
 19e:	8c 91       	ld	r24, X
 1a0:	80 8f       	std	Z+24, r24	; 0x18

	frame[size++] = AX_CONTROL;
	frame[size++] = AX_PID;

	memcpy(buf, data, Data_Length);
	for(i = 0; i < Data_Length; i++)
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	82 2f       	mov	r24, r18
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <Data_Length>
 1ac:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <Data_Length+0x1>
 1b0:	80 17       	cp	r24, r16
 1b2:	91 07       	cpc	r25, r17
 1b4:	5c f3       	brlt	.-42     	; 0x18c <make_ax25_frame_from_data+0xd4>
	frame[i + size] = buf[i] ;
	size += Data_Length;
 1b6:	18 e1       	ldi	r17, 0x18	; 24
 1b8:	10 0f       	add	r17, r16

	//tp = "VU2BUG";
	crc = crc16(frame+1,Data_Length+23);
 1ba:	67 e1       	ldi	r22, 0x17	; 23
 1bc:	60 0f       	add	r22, r16
 1be:	c7 01       	movw	r24, r14
 1c0:	4e df       	rcall	.-356    	; 0x5e <crc16>

	memcpy(buf, &crc, 2);
	for(i = 0; i < 2; i++)
	frame[i + size] = buf[i] ;
 1c2:	f6 01       	movw	r30, r12
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 83       	st	Z, r24
 1ca:	91 83       	std	Z+1, r25	; 0x01
	size += 2;

	frame[size++] = AX_FLAG;
 1cc:	06 5e       	subi	r16, 0xE6	; 230
 1ce:	f6 01       	movw	r30, r12
 1d0:	e0 0f       	add	r30, r16
 1d2:	f1 1d       	adc	r31, r1
 1d4:	8e e7       	ldi	r24, 0x7E	; 126
 1d6:	80 83       	st	Z, r24

}
 1d8:	c0 5b       	subi	r28, 0xB0	; 176
 1da:	df 4f       	sbci	r29, 0xFF	; 255
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	08 95       	ret

000001f8 <ATMEGA_Init>:

	    *dataPtr++ = SPDR; // get data from SPDR, *dataPtr++ points the next element
		dataCount--;
	}

    PORTB |= (1 << CC_CSN); // Make SS high to stop communication
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	84 bb       	out	0x14, r24	; 20
 1fc:	85 bb       	out	0x15, r24	; 21
 1fe:	b3 d1       	rcall	.+870    	; 0x566 <init_UART0>
 200:	bc 98       	cbi	0x17, 4	; 23
 202:	bd 9a       	sbi	0x17, 5	; 23
 204:	bb 9a       	sbi	0x17, 3	; 23
 206:	ba 9a       	sbi	0x17, 2	; 23
 208:	b8 98       	cbi	0x17, 0	; 23
 20a:	83 e5       	ldi	r24, 0x53	; 83
 20c:	8d b9       	out	0x0d, r24	; 13
 20e:	1e b8       	out	0x0e, r1	; 14
 210:	c2 9a       	sbi	0x18, 2	; 24
 212:	c3 98       	cbi	0x18, 3	; 24
 214:	c5 9a       	sbi	0x18, 5	; 24
 216:	08 95       	ret

00000218 <ccxxx0_Read>:
 218:	c2 98       	cbi	0x18, 2	; 24
 21a:	b4 99       	sbic	0x16, 4	; 22
 21c:	fe cf       	rjmp	.-4      	; 0x21a <ccxxx0_Read+0x2>
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	8f b9       	out	0x0f, r24	; 15
 222:	77 9b       	sbis	0x0e, 7	; 14
 224:	fe cf       	rjmp	.-4      	; 0x222 <ccxxx0_Read+0xa>
 226:	8f b1       	in	r24, 0x0f	; 15
 228:	1f b8       	out	0x0f, r1	; 15
 22a:	77 9b       	sbis	0x0e, 7	; 14
 22c:	fe cf       	rjmp	.-4      	; 0x22a <ccxxx0_Read+0x12>
 22e:	8f b1       	in	r24, 0x0f	; 15
 230:	c2 9a       	sbi	0x18, 2	; 24
 232:	08 95       	ret

00000234 <ccxxx0_Write>:
 234:	c2 98       	cbi	0x18, 2	; 24
 236:	b4 99       	sbic	0x16, 4	; 22
 238:	fe cf       	rjmp	.-4      	; 0x236 <ccxxx0_Write+0x2>
 23a:	8f b9       	out	0x0f, r24	; 15
 23c:	77 9b       	sbis	0x0e, 7	; 14
 23e:	fe cf       	rjmp	.-4      	; 0x23c <ccxxx0_Write+0x8>
 240:	8f b1       	in	r24, 0x0f	; 15
 242:	6f b9       	out	0x0f, r22	; 15
 244:	77 9b       	sbis	0x0e, 7	; 14
 246:	fe cf       	rjmp	.-4      	; 0x244 <ccxxx0_Write+0x10>
 248:	8f b1       	in	r24, 0x0f	; 15
 24a:	c2 9a       	sbi	0x18, 2	; 24
 24c:	08 95       	ret

0000024e <ccxxx0_Strobe>:
 24e:	c2 98       	cbi	0x18, 2	; 24
 250:	b4 99       	sbic	0x16, 4	; 22
 252:	fe cf       	rjmp	.-4      	; 0x250 <ccxxx0_Strobe+0x2>
 254:	8f b9       	out	0x0f, r24	; 15
 256:	77 9b       	sbis	0x0e, 7	; 14
 258:	fe cf       	rjmp	.-4      	; 0x256 <ccxxx0_Strobe+0x8>
 25a:	8f b1       	in	r24, 0x0f	; 15
 25c:	c2 9a       	sbi	0x18, 2	; 24
 25e:	08 95       	ret

00000260 <ccxxx0_WriteBurst>:

void ccxxx0_WriteBurst(unsigned char addr, unsigned char* dataPtr, unsigned int dataCount)
{
	unsigned char x;

	PORTB &= ~(1 << CC_CSN); // make the SS pin low to start the communication
 260:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO));
 262:	b4 99       	sbic	0x16, 4	; 22
 264:	fe cf       	rjmp	.-4      	; 0x262 <ccxxx0_WriteBurst+0x2>

    SPDR = addr | 0x40; // Header Byte R/~W bit - 0 Burst bit - 1
 266:	80 64       	ori	r24, 0x40	; 64
 268:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 26a:	77 9b       	sbis	0x0e, 7	; 14
 26c:	fe cf       	rjmp	.-4      	; 0x26a <ccxxx0_WriteBurst+0xa>
	x = SPDR; // flush SPDR
 26e:	8f b1       	in	r24, 0x0f	; 15

	while(dataCount) { // Loop that stops communication after desired number of writing cycles
 270:	41 15       	cp	r20, r1
 272:	51 05       	cpc	r21, r1
 274:	51 f0       	breq	.+20     	; 0x28a <ccxxx0_WriteBurst+0x2a>
 276:	fb 01       	movw	r30, r22
 278:	46 0f       	add	r20, r22
 27a:	57 1f       	adc	r21, r23
	    SPDR = *dataPtr++;
 27c:	81 91       	ld	r24, Z+
 27e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 280:	77 9b       	sbis	0x0e, 7	; 14
 282:	fe cf       	rjmp	.-4      	; 0x280 <ccxxx0_WriteBurst+0x20>

    SPDR = addr | 0x40; // Header Byte R/~W bit - 0 Burst bit - 1
	while(!(SPSR & (1<<SPIF)));
	x = SPDR; // flush SPDR

	while(dataCount) { // Loop that stops communication after desired number of writing cycles
 284:	e4 17       	cp	r30, r20
 286:	f5 07       	cpc	r31, r21
 288:	c9 f7       	brne	.-14     	; 0x27c <ccxxx0_WriteBurst+0x1c>
		while(!(SPSR & (1<<SPIF)));

		dataCount--;
	}

    PORTB |= (1 << CC_CSN); // Make SS high to stop communication
 28a:	c2 9a       	sbi	0x18, 2	; 24
 28c:	08 95       	ret

0000028e <ccxxx0_PowerOnReset>:

void ccxxx0_PowerOnReset() // Manual Reset
{
	unsigned char x;
	//datasheet cc1101 pg on.51 Manual Reset
    PORTB |= (1 << CC_CSN); // Make SS high
 28e:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <ccxxx0_PowerOnReset+0x4>
 296:	00 c0       	rjmp	.+0      	; 0x298 <ccxxx0_PowerOnReset+0xa>
	_delay_us(1);
	PORTB &= ~(1 << CC_CSN); // Make SS low
 298:	c2 98       	cbi	0x18, 2	; 24
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <ccxxx0_PowerOnReset+0xe>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <ccxxx0_PowerOnReset+0x14>
	_delay_us(1);
    PORTB |= (1 << CC_CSN); // Make SS high fot atleast 41 us
 2a2:	c2 9a       	sbi	0x18, 2	; 24
 2a4:	8d e6       	ldi	r24, 0x6D	; 109
 2a6:	8a 95       	dec	r24
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <ccxxx0_PowerOnReset+0x18>
 2aa:	00 00       	nop
	_delay_us(41);

	PORTB &= ~(1 << CC_CSN); // Make SS low
 2ac:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO)); // wait for SO to go low
 2ae:	b4 99       	sbic	0x16, 4	; 22
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <ccxxx0_PowerOnReset+0x20>
 2b2:	85 e8       	ldi	r24, 0x85	; 133
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <ccxxx0_PowerOnReset+0x26>
 2b8:	00 00       	nop

	_delay_us(50);

    SPDR = CCxxx0_SRES; // Isssue the SRES command strobe
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2be:	77 9b       	sbis	0x0e, 7	; 14
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <ccxxx0_PowerOnReset+0x30>
	x = SPDR; // flush SPDR
 2c2:	8f b1       	in	r24, 0x0f	; 15

	while(PINB & (1 << CC_SO)); // When SO goes low again, reset is complete
 2c4:	b4 99       	sbic	0x16, 4	; 22
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <ccxxx0_PowerOnReset+0x36>
 2c8:	85 e8       	ldi	r24, 0x85	; 133
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <ccxxx0_PowerOnReset+0x3c>
 2ce:	00 00       	nop

// **THE CHIP IS IDLE STATE AFTER RESET**

	_delay_us(50);

    PORTB |= (1 << CC_CSN); // Make SS high
 2d0:	c2 9a       	sbi	0x18, 2	; 24
 2d2:	08 95       	ret

000002d4 <ccxxx0_Setup>:
}
void ccxxx0_Setup(const RF_SETTINGS* settings)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
	unsigned char read;
    // Write register settings
    ccxxx0_Write(CCxxx0_IOCFG0,   settings->IOCFG0); // Write the register value at its address
 2da:	68 81       	ld	r22, Y
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	aa df       	rcall	.-172    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_IOCFG0); // Read the written register back and send it through UART
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	9a df       	rcall	.-204    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);// Send the read value through UART
 2e4:	4e d1       	rcall	.+668    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FIFOTHR,  settings->FIFOTHR);
 2e6:	69 81       	ldd	r22, Y+1	; 0x01
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	a4 df       	rcall	.-184    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FIFOTHR);
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	94 df       	rcall	.-216    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 2f0:	48 d1       	rcall	.+656    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
 2f2:	6a 81       	ldd	r22, Y+2	; 0x02
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	9e df       	rcall	.-196    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_PKTCTRL0);
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	8e df       	rcall	.-228    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 2fc:	42 d1       	rcall	.+644    	; 0x582 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCTRL1,  settings->FSCTRL1);
 2fe:	6b 81       	ldd	r22, Y+3	; 0x03
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	98 df       	rcall	.-208    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCTRL1);
 304:	8b e0       	ldi	r24, 0x0B	; 11
 306:	88 df       	rcall	.-240    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 308:	3c d1       	rcall	.+632    	; 0x582 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_FSCTRL0,  settings->FSCTRL0);
    ccxxx0_Write(CCxxx0_FREQ2,    settings->FREQ2);
 30a:	6c 81       	ldd	r22, Y+4	; 0x04
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	92 df       	rcall	.-220    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ2);
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	82 df       	rcall	.-252    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 314:	36 d1       	rcall	.+620    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FREQ1,    settings->FREQ1);
 316:	6d 81       	ldd	r22, Y+5	; 0x05
 318:	8e e0       	ldi	r24, 0x0E	; 14
 31a:	8c df       	rcall	.-232    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ1);
 31c:	8e e0       	ldi	r24, 0x0E	; 14
 31e:	7c df       	rcall	.-264    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 320:	30 d1       	rcall	.+608    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FREQ0,    settings->FREQ0);
 322:	6e 81       	ldd	r22, Y+6	; 0x06
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	86 df       	rcall	.-244    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ0);
 328:	8f e0       	ldi	r24, 0x0F	; 15
 32a:	76 df       	rcall	.-276    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 32c:	2a d1       	rcall	.+596    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG4,  settings->MDMCFG4);
 32e:	6f 81       	ldd	r22, Y+7	; 0x07
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	80 df       	rcall	.-256    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG4);
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	70 df       	rcall	.-288    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 338:	24 d1       	rcall	.+584    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG3,  settings->MDMCFG3);
 33a:	68 85       	ldd	r22, Y+8	; 0x08
 33c:	81 e1       	ldi	r24, 0x11	; 17
 33e:	7a df       	rcall	.-268    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG3);
 340:	81 e1       	ldi	r24, 0x11	; 17
 342:	6a df       	rcall	.-300    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 344:	1e d1       	rcall	.+572    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG2,  settings->MDMCFG2);
 346:	69 85       	ldd	r22, Y+9	; 0x09
 348:	82 e1       	ldi	r24, 0x12	; 18
 34a:	74 df       	rcall	.-280    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG2);
 34c:	82 e1       	ldi	r24, 0x12	; 18
 34e:	64 df       	rcall	.-312    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 350:	18 d1       	rcall	.+560    	; 0x582 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_MDMCFG1,  settings->MDMCFG1);
    //ccxxx0_Write(CCxxx0_MDMCFG0,  settings->MDMCFG0);
    ccxxx0_Write(CCxxx0_DEVIATN,  settings->DEVIATN);
 352:	6a 85       	ldd	r22, Y+10	; 0x0a
 354:	85 e1       	ldi	r24, 0x15	; 21
 356:	6e df       	rcall	.-292    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_DEVIATN);
 358:	85 e1       	ldi	r24, 0x15	; 21
 35a:	5e df       	rcall	.-324    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 35c:	12 d1       	rcall	.+548    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MCSM0 ,   settings->MCSM0 );
 35e:	6b 85       	ldd	r22, Y+11	; 0x0b
 360:	88 e1       	ldi	r24, 0x18	; 24
 362:	68 df       	rcall	.-304    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MCSM0);
 364:	88 e1       	ldi	r24, 0x18	; 24
 366:	58 df       	rcall	.-336    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 368:	0c d1       	rcall	.+536    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FOCCFG,   settings->FOCCFG);
 36a:	6c 85       	ldd	r22, Y+12	; 0x0c
 36c:	89 e1       	ldi	r24, 0x19	; 25
 36e:	62 df       	rcall	.-316    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FOCCFG);
 370:	89 e1       	ldi	r24, 0x19	; 25
 372:	52 df       	rcall	.-348    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 374:	06 d1       	rcall	.+524    	; 0x582 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_BSCFG,    settings->BSCFG);
    ccxxx0_Write(CCxxx0_WORCTRL,  settings->WORCTRL);
 376:	6d 85       	ldd	r22, Y+13	; 0x0d
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	5c df       	rcall	.-328    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_WORCTRL);
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	4c df       	rcall	.-360    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 380:	00 d1       	rcall	.+512    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL3,   settings->FSCAL3);
 382:	6e 85       	ldd	r22, Y+14	; 0x0e
 384:	83 e2       	ldi	r24, 0x23	; 35
 386:	56 df       	rcall	.-340    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL3);
 388:	83 e2       	ldi	r24, 0x23	; 35
 38a:	46 df       	rcall	.-372    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 38c:	fa d0       	rcall	.+500    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL2,   settings->FSCAL2);
 38e:	6f 85       	ldd	r22, Y+15	; 0x0f
 390:	84 e2       	ldi	r24, 0x24	; 36
 392:	50 df       	rcall	.-352    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL2);
 394:	84 e2       	ldi	r24, 0x24	; 36
 396:	40 df       	rcall	.-384    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 398:	f4 d0       	rcall	.+488    	; 0x582 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL1,   settings->FSCAL1);
 39a:	68 89       	ldd	r22, Y+16	; 0x10
 39c:	85 e2       	ldi	r24, 0x25	; 37
 39e:	4a df       	rcall	.-364    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL1);
 3a0:	85 e2       	ldi	r24, 0x25	; 37
 3a2:	3a df       	rcall	.-396    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 3a4:	ee d0       	rcall	.+476    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL0,   settings->FSCAL0);
 3a6:	69 89       	ldd	r22, Y+17	; 0x11
 3a8:	86 e2       	ldi	r24, 0x26	; 38
 3aa:	44 df       	rcall	.-376    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL0);
 3ac:	86 e2       	ldi	r24, 0x26	; 38
 3ae:	34 df       	rcall	.-408    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 3b0:	e8 d0       	rcall	.+464    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST2,    settings->TEST2);
 3b2:	6a 89       	ldd	r22, Y+18	; 0x12
 3b4:	8c e2       	ldi	r24, 0x2C	; 44
 3b6:	3e df       	rcall	.-388    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST2);
 3b8:	8c e2       	ldi	r24, 0x2C	; 44
 3ba:	2e df       	rcall	.-420    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 3bc:	e2 d0       	rcall	.+452    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST1,    settings->TEST1);
 3be:	6b 89       	ldd	r22, Y+19	; 0x13
 3c0:	8d e2       	ldi	r24, 0x2D	; 45
 3c2:	38 df       	rcall	.-400    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST1);
 3c4:	8d e2       	ldi	r24, 0x2D	; 45
 3c6:	28 df       	rcall	.-432    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 3c8:	dc d0       	rcall	.+440    	; 0x582 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST0,    settings->TEST0);
 3ca:	6c 89       	ldd	r22, Y+20	; 0x14
 3cc:	8e e2       	ldi	r24, 0x2E	; 46
 3ce:	32 df       	rcall	.-412    	; 0x234 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST0);
 3d0:	8e e2       	ldi	r24, 0x2E	; 46
 3d2:	22 df       	rcall	.-444    	; 0x218 <ccxxx0_Read>
	transmit_UART0(read);
 3d4:	d6 d0       	rcall	.+428    	; 0x582 <transmit_UART0>
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <CC_Transmit>:

void CC_Transmit(unsigned int pkt_length)
{
	PORTC = 0xff;
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	85 bb       	out	0x15, r24	; 21
 3e0:	e8 e7       	ldi	r30, 0x78	; 120
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	aa e2       	ldi	r26, 0x2A	; 42
 3e6:	b1 e0       	ldi	r27, 0x01	; 1
 3e8:	25 eb       	ldi	r18, 0xB5	; 181
 3ea:	30 e0       	ldi	r19, 0x00	; 0
	char temp[61];

	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
	{
		data_transmit[i] =  address[i];
 3ec:	81 91       	ld	r24, Z+
 3ee:	8d 93       	st	X+, r24
{
	PORTC = 0xff;
	char temp[61];

	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
 3f0:	e2 17       	cp	r30, r18
 3f2:	f3 07       	cpc	r31, r19
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <CC_Transmit+0x10>
	{
		data_transmit[i] =  address[i];
	}

	ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 3f6:	86 e3       	ldi	r24, 0x36	; 54
 3f8:	2a df       	rcall	.-428    	; 0x24e <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	62 e6       	ldi	r22, 0x62	; 98
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8e e3       	ldi	r24, 0x3E	; 62
 404:	2d df       	rcall	.-422    	; 0x260 <ccxxx0_WriteBurst>
	ccxxx0_Strobe(CCxxx0_SFTX); // flush tx buff
 406:	8b e3       	ldi	r24, 0x3B	; 59
 408:	22 df       	rcall	.-444    	; 0x24e <ccxxx0_Strobe>

	ccxxx0_Strobe(CCxxx0_STX); // goto tx mode
 40a:	85 e3       	ldi	r24, 0x35	; 53
 40c:	20 df       	rcall	.-448    	; 0x24e <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_TXFIFO, (unsigned char*)data_transmit,61); // addr=M, payload=4 bytes, Total PKTLEN=5//see cc1101 datasheet pg no.-40
 40e:	4d e3       	ldi	r20, 0x3D	; 61
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	6a e2       	ldi	r22, 0x2A	; 42
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	23 df       	rcall	.-442    	; 0x260 <ccxxx0_WriteBurst>
	//ccxxx0_ReadBurst(CCxxx0_TXFIFO, (unsigned char*)data_transmit,35);
	if(data_transmit[60]==0x7E){PORTC = 0xAA;};
 41a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <data_transmit+0x3c>
 41e:	8e 37       	cpi	r24, 0x7E	; 126
 420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	8a ea       	ldi	r24, 0xAA	; 170
 424:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 426:	8f e0       	ldi	r24, 0x0F	; 15
 428:	97 e2       	ldi	r25, 0x27	; 39
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	9f eb       	ldi	r25, 0xBF	; 191
 434:	24 ed       	ldi	r18, 0xD4	; 212
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	_delay_ms(5);
	//ccxxx0_Strobe(CCxxx0_STX); // goto tx mode
	_delay_ms(75);// initially 120ms

	ccxxx0_Strobe(CCxxx0_SIDLE);
 444:	86 e3       	ldi	r24, 0x36	; 54
 446:	03 df       	rcall	.-506    	; 0x24e <ccxxx0_Strobe>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x00;
 454:	15 ba       	out	0x15, r1	; 21
 456:	08 95       	ret

00000458 <__vector_11>:
	//transmit_string_UART0((unsigned char *)data_transmit);
	//transmit_string_UART0("\r\n");
}


ISR(USART_RXC_vect){
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	cli(); //disable intterupts
 482:	f8 94       	cli
	//transmitFlag = 0;
	int i = 0;
	address[i] = UDR; //
 484:	8c b1       	in	r24, 0x0c	; 12
 486:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <address>
 48a:	c9 e7       	ldi	r28, 0x79	; 121
 48c:	d0 e0       	ldi	r29, 0x00	; 0
 48e:	05 eb       	ldi	r16, 0xB5	; 181
 490:	10 e0       	ldi	r17, 0x00	; 0
	//if(address[i]==0x7E){PORTC = 0xCC;}

		for(i = 1;i<61; i++){
			char temp = receive_UART0();
 492:	7b d0       	rcall	.+246    	; 0x58a <receive_UART0>
			address[i] = temp;}
 494:	89 93       	st	Y+, r24
	//transmitFlag = 0;
	int i = 0;
	address[i] = UDR; //
	//if(address[i]==0x7E){PORTC = 0xCC;}

		for(i = 1;i<61; i++){
 496:	c0 17       	cp	r28, r16
 498:	d1 07       	cpc	r29, r17
 49a:	d9 f7       	brne	.-10     	; 0x492 <__stack+0x33>
			char temp = receive_UART0();
			address[i] = temp;}
			//transmit_UART0(temp);}
			//if(address[60]==0x7E){PORTC = 0xEE;}
		address[i] = '\0';
 49c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <address+0x3d>
		CC_Transmit(61);
 4a0:	8d e3       	ldi	r24, 0x3D	; 61
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	9b df       	rcall	.-202    	; 0x3dc <CC_Transmit>
		//transmitFlag = 1;
		sei(); // Global interrupts enable
 4a6:	78 94       	sei
	//transmit_string_UART0("In ISR");

	//transmit_string_UART0("Out of ISR");
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <main>:
/*****
	MAIN program
*****/
int main(void)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	c2 57       	subi	r28, 0x72	; 114
 4dc:	d1 09       	sbc	r29, r1
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
	cli(); 							//Clears the global interrupts
 4e8:	f8 94       	cli
	ATMEGA_Init();
 4ea:	86 de       	rcall	.-756    	; 0x1f8 <ATMEGA_Init>
	//sei();

	DDRC = 0b00001111;
 4ec:	8f e0       	ldi	r24, 0x0F	; 15
 4ee:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	85 bb       	out	0x15, r24	; 21
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	89 e6       	ldi	r24, 0x69	; 105
 4f8:	98 e1       	ldi	r25, 0x18	; 24
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x28>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0x32>
 504:	00 00       	nop
	//transmit_string_UART0("cc1101_PowerOnReset\r\n");
	_delay_ms(1000);
	PORTC = 0x00;
 506:	15 ba       	out	0x15, r1	; 21
	ccxxx0_PowerOnReset();
 508:	c2 de       	rcall	.-636    	; 0x28e <ccxxx0_PowerOnReset>
	//transmit_string_UART0("cc1101_Setup\r\n");
	ccxxx0_Setup(&rfSettings);
 50a:	83 e6       	ldi	r24, 0x63	; 99
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	e2 de       	rcall	.-572    	; 0x2d4 <ccxxx0_Setup>
	uint8_t buf[80];
	unsigned char test_data[34];
	memcpy(buf, "IITBOMBAYPRATHAMIITBOMBAYADVITIYXX", AX_ADDR_SIZE);
 510:	86 e0       	ldi	r24, 0x06	; 6
 512:	ea ec       	ldi	r30, 0xCA	; 202
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	de 01       	movw	r26, r28
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	01 90       	ld	r0, Z+
 51c:	0d 92       	st	X+, r0
 51e:	8a 95       	dec	r24
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x48>
 522:	fe 01       	movw	r30, r28
 524:	31 96       	adiw	r30, 0x01	; 1
 526:	de 01       	movw	r26, r28
 528:	af 5a       	subi	r26, 0xAF	; 175
 52a:	bf 4f       	sbci	r27, 0xFF	; 255
 52c:	9e 01       	movw	r18, r28
 52e:	2d 5d       	subi	r18, 0xDD	; 221
 530:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int jk = 0; jk < 34; jk++)
		test_data[jk] = buf[jk];
 532:	81 91       	ld	r24, Z+
 534:	8d 93       	st	X+, r24
	//transmit_string_UART0("cc1101_Setup\r\n");
	ccxxx0_Setup(&rfSettings);
	uint8_t buf[80];
	unsigned char test_data[34];
	memcpy(buf, "IITBOMBAYPRATHAMIITBOMBAYADVITIYXX", AX_ADDR_SIZE);
	for(int jk = 0; jk < 34; jk++)
 536:	e2 17       	cp	r30, r18
 538:	f3 07       	cpc	r31, r19
 53a:	d9 f7       	brne	.-10     	; 0x532 <main+0x60>
		test_data[jk] = buf[jk];

	make_ax25_frame_from_data((uint8_t *)address, (uint8_t *)test_data);
 53c:	be 01       	movw	r22, r28
 53e:	6f 5a       	subi	r22, 0xAF	; 175
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	88 e7       	ldi	r24, 0x78	; 120
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	b8 dd       	rcall	.-1168   	; 0xb8 <make_ax25_frame_from_data>
	address[61] = '\0';
 548:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <address+0x3d>
		while(1)
		{
			CC_Transmit(61);
 54c:	8d e3       	ldi	r24, 0x3D	; 61
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	45 df       	rcall	.-374    	; 0x3dc <CC_Transmit>
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	83 e2       	ldi	r24, 0x23	; 35
 556:	94 ef       	ldi	r25, 0xF4	; 244
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x86>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x90>
 562:	00 00       	nop
 564:	f3 cf       	rjmp	.-26     	; 0x54c <main+0x7a>

00000566 <init_UART0>:
	
}
*/
void init_UART0(void)
{
  UCSRA = 0;
 566:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 568:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 56a:	10 bc       	out	0x20, r1	; 32
    
  ///Double Baud Rate
  UCSRA |= (1<<U2X);
 56c:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |=(1<<RXEN)|(1<<TXEN)| (1<<RXCIE);
 56e:	8a b1       	in	r24, 0x0a	; 10
 570:	88 69       	ori	r24, 0x98	; 152
 572:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 574:	80 b5       	in	r24, 0x20	; 32
 576:	86 68       	ori	r24, 0x86	; 134
 578:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 57a:	87 e6       	ldi	r24, 0x67	; 103
 57c:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 57e:	10 bc       	out	0x20, r1	; 32
 580:	08 95       	ret

00000582 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 582:	5d 9b       	sbis	0x0b, 5	; 11
 584:	fe cf       	rjmp	.-4      	; 0x582 <transmit_UART0>
  //* Start transmission
  UDR = data;
 586:	8c b9       	out	0x0c, r24	; 12
 588:	08 95       	ret

0000058a <receive_UART0>:
}

uint8_t receive_UART0(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSRA & _BV(RXC)));
 58a:	5f 9b       	sbis	0x0b, 7	; 11
 58c:	fe cf       	rjmp	.-4      	; 0x58a <receive_UART0>
  return UDR;
 58e:	8c b1       	in	r24, 0x0c	; 12
}
 590:	08 95       	ret

00000592 <memcpy>:
 592:	fb 01       	movw	r30, r22
 594:	dc 01       	movw	r26, r24
 596:	02 c0       	rjmp	.+4      	; 0x59c <memcpy+0xa>
 598:	01 90       	ld	r0, Z+
 59a:	0d 92       	st	X+, r0
 59c:	41 50       	subi	r20, 0x01	; 1
 59e:	50 40       	sbci	r21, 0x00	; 0
 5a0:	d8 f7       	brcc	.-10     	; 0x598 <memcpy+0x6>
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
